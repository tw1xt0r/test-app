"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.remapProps = exports.defaultCSSInterop = void 0;
const react_1 = require("react");
const prop_mapping_1 = require("./native/prop-mapping");
const render_1 = require("./render");
const defaultCSSInterop = (component, options, props, children) => {
    for (const [key, { sources }] of options.config) {
        const newStyles = [];
        for (const source of sources) {
            const value = props[source];
            if (typeof value === "string") {
                newStyles.push({
                    $$css: true,
                    [value]: value,
                });
            }
            delete props[source];
        }
        let styles = props[key];
        if (Array.isArray(styles)) {
            styles = [...newStyles, ...styles];
        }
        else if (styles) {
            styles = [...newStyles, styles];
        }
        else {
            styles = newStyles;
        }
        props[key] = styles;
    }
    return [component, props, children];
};
exports.defaultCSSInterop = defaultCSSInterop;
function remapProps(component, mapping) {
    const { config } = (0, prop_mapping_1.getNormalizeConfig)(mapping);
    let render = ({ ...props }, ref) => {
        for (const [key, { sources }] of config) {
            let rawStyles = [];
            for (const sourceProp of sources) {
                const value = props?.[sourceProp];
                if (typeof value !== "string")
                    continue;
                delete props[sourceProp];
                rawStyles.push({
                    $$css: true,
                    [value]: value,
                });
            }
            const existingStyle = props[key];
            if (Array.isArray(existingStyle)) {
                rawStyles.push(...existingStyle);
            }
            else if (existingStyle) {
                rawStyles.push(existingStyle);
            }
            props[key] = rawStyles;
        }
        return (0, react_1.createElement)(component, props, props.children);
    };
    render_1.interopComponents.set(component, {
        type: (0, react_1.forwardRef)(render),
        check: () => true,
        createElementWithInterop(props, children) {
            return render({ ...props, children }, null);
        },
    });
}
exports.remapProps = remapProps;
//# sourceMappingURL=css-interop.js.map