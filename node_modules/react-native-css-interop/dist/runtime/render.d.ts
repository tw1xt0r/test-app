import { ComponentType, ReactNode, createElement } from "react";
import type { BasicInteropFunction, JSXFunction } from "../types";
export type InteropTypeCheck<T> = {
    type: ComponentType<T>;
    check: (props: T) => boolean;
    createElementWithInterop: (props: any, children: ReactNode) => ReturnType<typeof createElement>;
};
export declare const interopComponents: WeakMap<object, InteropTypeCheck<any>>;
export declare function render<P>(jsx: JSXFunction<P>, type: any, props: any, ...args: Parameters<JSXFunction<P>> extends [any, any, ...infer R] ? R : never): any;
export declare function renderWithInterop<P>(jsx: JSXFunction<P>, interop: BasicInteropFunction, ...args: Parameters<JSXFunction<P>>): any;
export declare function createElementAndCheckCssInterop(...args: Parameters<typeof createElement>): import("react").ReactElement<{}, string | import("react").JSXElementConstructor<any>>;
