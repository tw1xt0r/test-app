"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.colorScheme = exports.useColorScheme = void 0;
const react_native_1 = require("react-native");
const stylesheet_1 = require("./stylesheet");
const signals_1 = require("../signals");
const manualColorScheme = (0, signals_1.createSignal)("light");
const [darkMode, darkModeValue] = stylesheet_1.StyleSheet.getFlag("darkMode")?.split(" ") ?? ["media"];
if (darkMode === "media") {
    manualColorScheme.set(react_native_1.Appearance.getColorScheme() ?? "light");
    react_native_1.Appearance.addChangeListener(({ colorScheme }) => {
        if (darkMode === "media") {
            manualColorScheme.set(colorScheme ?? "light");
        }
    });
}
else if (darkMode === "class") {
    manualColorScheme.set(globalThis.window.document.documentElement.classList.contains(darkModeValue)
        ? "dark"
        : "light");
}
function useColorScheme() {
    return (0, signals_1.useComputed)(() => ({
        colorScheme: manualColorScheme.get(),
        setColorScheme: exports.colorScheme.set,
        toggleColorScheme: exports.colorScheme.toggle,
    }));
}
exports.useColorScheme = useColorScheme;
exports.colorScheme = {
    get: () => manualColorScheme.get(),
    set: (colorScheme) => {
        if (darkMode === "media") {
            throw new Error("Cannot manually set color scheme, as dark mode is type 'media'. Please use StyleSheet.setFlag('darkMode', 'class')");
        }
        if (!globalThis.window) {
            throw new Error("Cannot manually set color scheme while not in a browser environment.");
        }
        let newColorScheme;
        if (colorScheme === "system") {
            if (typeof window !== undefined) {
                newColorScheme = window.matchMedia("(prefers-color-scheme: dark)")
                    ? "dark"
                    : "light";
            }
        }
        else {
            newColorScheme = colorScheme;
        }
        if (!newColorScheme)
            return;
        if (newColorScheme === "dark") {
            globalThis.window?.document.documentElement.classList.add(darkModeValue);
        }
        else {
            globalThis.window?.document.documentElement.classList.remove(darkModeValue);
        }
        manualColorScheme.set(newColorScheme);
    },
    toggle() {
        exports.colorScheme.set(exports.colorScheme.get() === "dark" ? "light" : "dark");
    },
};
//# sourceMappingURL=color-scheme.js.map