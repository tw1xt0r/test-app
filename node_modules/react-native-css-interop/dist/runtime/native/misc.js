"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isReduceMotionEnabled = exports.vh = exports.vw = exports.ContainerContext = exports.styleMetaMap = exports.styleSpecificity = exports.opaqueStyles = exports.globalStyles = exports.animationMap = void 0;
const react_1 = require("react");
const react_native_1 = require("react-native");
const signals_1 = require("../signals");
const shared_1 = require("../../shared");
exports.animationMap = new Map();
exports.globalStyles = new Map();
exports.opaqueStyles = new WeakMap();
exports.styleSpecificity = new WeakMap();
exports.styleMetaMap = new WeakMap();
exports.ContainerContext = (0, react_1.createContext)({});
exports.vw = viewportUnit("width", react_native_1.Dimensions);
exports.vh = viewportUnit("height", react_native_1.Dimensions);
function viewportUnit(key, dimensions) {
    const signal = (0, signals_1.createSignal)(dimensions.get("window")[key] || 0);
    let subscription = dimensions.addEventListener("change", ({ window }) => {
        signal.set(window[key]);
    });
    const get = () => signal.get() || 0;
    const reset = (dimensions) => {
        signal.set(dimensions.get("window")[key] || 0);
        subscription.remove();
        subscription = dimensions.addEventListener("change", ({ window }) => {
            signal.set(window[key]);
        });
    };
    return { get, [shared_1.INTERNAL_RESET]: reset, [shared_1.INTERNAL_SET]: signal.set };
}
exports.isReduceMotionEnabled = (function createIsReduceMotionEnabled() {
    const signal = (0, signals_1.createSignal)(false);
    react_native_1.AccessibilityInfo.isReduceMotionEnabled()?.then(signal.set);
    react_native_1.AccessibilityInfo.addEventListener("reduceMotionChanged", signal.set);
    return { ...signal, [shared_1.INTERNAL_RESET]: () => signal.set(false) };
})();
//# sourceMappingURL=misc.js.map