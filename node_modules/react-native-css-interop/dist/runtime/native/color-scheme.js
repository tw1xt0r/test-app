"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useColorScheme = exports.colorScheme = void 0;
const react_native_1 = require("react-native");
const signals_1 = require("../signals");
const shared_1 = require("../../shared");
let appearance = react_native_1.Appearance;
let appearanceListener = appearance.addChangeListener((state) => _appColorScheme.set(state.colorScheme ?? "light"));
react_native_1.AppState.addEventListener("change", () => _appColorScheme.set(appearance.getColorScheme() ?? "light"));
const _appColorScheme = (0, signals_1.createSignal)("system");
exports.colorScheme = {
    ..._appColorScheme,
    set(value) {
        _appColorScheme.set(value);
        if (value === "system") {
            appearance.setColorScheme(null);
        }
        else {
            appearance.setColorScheme(value);
        }
    },
    get() {
        let current = _appColorScheme.get();
        if (current === "system")
            current = appearance.getColorScheme() ?? "light";
        return current;
    },
    toggle() {
        let current = _appColorScheme.peek();
        if (current === "system")
            current = appearance.getColorScheme() ?? "light";
        _appColorScheme.set(current === "light" ? "dark" : "light");
    },
    [shared_1.INTERNAL_RESET]: ($appearance) => {
        _appColorScheme.set("system");
        appearance = $appearance;
        appearanceListener.remove();
        appearanceListener = appearance.addChangeListener((state) => _appColorScheme.set(state.colorScheme ?? "light"));
    },
};
function useColorScheme() {
    return (0, signals_1.useComputed)(() => ({
        colorScheme: exports.colorScheme.get(),
        setColorScheme: exports.colorScheme.set,
        toggleColorScheme: exports.colorScheme.toggle,
    }));
}
exports.useColorScheme = useColorScheme;
//# sourceMappingURL=color-scheme.js.map