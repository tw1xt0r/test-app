"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.inlineSpecificity = exports.getSpecificity = exports.getGlobalStyle = exports.StyleSheet = exports.fastReloadSignal = exports.warned = exports.warnings = void 0;
const react_native_1 = require("react-native");
const misc_1 = require("./misc");
const shared_1 = require("../../shared");
const color_scheme_1 = require("./color-scheme");
const rem_1 = require("./rem");
const signals_1 = require("../signals");
const inheritance_1 = require("./inheritance");
exports.warnings = new Map();
exports.warned = new Set();
exports.fastReloadSignal = (0, signals_1.createSignal)(0, "fast-reload");
const commonStyleSheet = {
    [shared_1.INTERNAL_FLAGS]: {},
    [shared_1.INTERNAL_RESET]({ dimensions = react_native_1.Dimensions, appearance = react_native_1.Appearance } = {}) {
        misc_1.globalStyles.clear();
        misc_1.animationMap.clear();
        exports.warnings.clear();
        exports.warned.clear();
        rem_1.rem[shared_1.INTERNAL_RESET]();
        misc_1.vw[shared_1.INTERNAL_RESET](dimensions);
        misc_1.vh[shared_1.INTERNAL_RESET](dimensions);
        color_scheme_1.colorScheme[shared_1.INTERNAL_RESET](appearance);
    },
    getFlag(name) {
        return this[shared_1.INTERNAL_FLAGS][name];
    },
    classNameMergeStrategy(c) {
        return c;
    },
    unstable_hook_onClassName() { },
    register(options) {
        this[shared_1.INTERNAL_FLAGS]["$$receivedData"] = "true";
        if (options.flags) {
            Object.assign(this[shared_1.INTERNAL_FLAGS], options.flags);
        }
        if (options.keyframes) {
            for (const [name, keyframes] of Object.entries(options.keyframes)) {
                misc_1.animationMap.set(name, keyframes);
            }
        }
        if (options.declarations) {
            for (const [name, styles] of Object.entries(options.declarations)) {
                const taggedStyles = tagStyles(name, styles);
                if (taggedStyles) {
                    misc_1.globalStyles.set(name, taggedStyles);
                }
            }
        }
        if (options.rootVariables) {
            for (const [name, value] of Object.entries(options.rootVariables)) {
                let signal = inheritance_1.globalVariables.root.get(name);
                if (!signal) {
                    signal = (0, inheritance_1.createColorSchemeSignal)(`root:${name}`);
                    inheritance_1.globalVariables.root.set(name, signal);
                }
                signal.set(value);
            }
        }
        if (options.universalVariables) {
            for (const [name, value] of Object.entries(options.universalVariables)) {
                let signal = inheritance_1.globalVariables.universal.get(name);
                if (!signal) {
                    signal = (0, inheritance_1.createColorSchemeSignal)(`root:${name}`);
                    inheritance_1.globalVariables.universal.set(name, signal);
                }
                signal.set(value);
            }
        }
        exports.fastReloadSignal.set((exports.fastReloadSignal.get() ?? 0) + 1);
    },
};
exports.StyleSheet = Object.assign({}, commonStyleSheet, react_native_1.StyleSheet);
function tagStyles(name, styles) {
    if (Array.isArray(styles)) {
        let didTag = false;
        const taggedStyles = styles.map((s) => {
            const taggedStyle = tagStyles(name, s);
            didTag ||= Boolean(s.style && misc_1.styleMetaMap.has(s.style));
            return taggedStyle;
        });
        if (didTag) {
            misc_1.styleMetaMap.set(taggedStyles, {});
        }
        return taggedStyles;
    }
    else {
        let hasMeta = false;
        const meta = {};
        if (styles.isDynamic) {
            hasMeta = true;
        }
        if (styles.variables) {
            meta.variables = styles.variables;
            hasMeta = true;
        }
        if (Array.isArray(styles.media) && styles.media.length > 0) {
            meta.media = styles.media;
            hasMeta = true;
        }
        if (styles.pseudoClasses) {
            meta.pseudoClasses = styles.pseudoClasses;
            hasMeta = true;
        }
        if (styles.animations) {
            meta.animations = styles.animations;
            hasMeta = true;
            const names = styles.animations.name;
            if (names) {
                for (const name of names) {
                    if (name.type === "none")
                        continue;
                    const animationMeta = misc_1.animationMap.get(name.value);
                    if (!animationMeta)
                        continue;
                    meta.requiresLayoutWidth ??= animationMeta?.requiresLayoutWidth;
                    meta.requiresLayoutHeight ??= animationMeta?.requiresLayoutHeight;
                }
            }
        }
        if (styles.container) {
            meta.container = {
                names: styles.container.names,
                type: styles.container.type ?? "normal",
            };
            hasMeta = true;
        }
        if (styles.containerQuery) {
            meta.containerQuery = styles.containerQuery;
            hasMeta = true;
        }
        if (styles.transition) {
            meta.transition = styles.transition;
            hasMeta = true;
        }
        if (styles.requiresLayoutWidth || styles.requiresLayoutHeight) {
            meta.requiresLayoutWidth ??= styles.requiresLayoutWidth;
            meta.requiresLayoutHeight ??= styles.requiresLayoutHeight;
            hasMeta = true;
        }
        if (styles.importantStyles) {
            meta.importantStyles = styles.importantStyles;
            hasMeta = true;
        }
        if (process.env.NODE_ENV !== "production" && styles.warnings) {
            exports.warnings.set(name, styles.warnings);
        }
        if (hasMeta && styles.style) {
            misc_1.styleMetaMap.set(styles.style, meta);
        }
        misc_1.styleSpecificity.set(styles.style, styles.specificity);
        return styles.style;
    }
}
function getGlobalStyle(style) {
    if (typeof style === "string") {
        if (exports.warnings.has(style) && !exports.warned.has(style)) {
            exports.warned.add(style);
            if (process.env.NODE_ENV === "development") {
                console.log(exports.warnings.get(style));
            }
        }
        return misc_1.globalStyles.get(style);
    }
    else {
        return misc_1.opaqueStyles.get(style) ?? style;
    }
}
exports.getGlobalStyle = getGlobalStyle;
function getSpecificity(style) {
    return style
        ? misc_1.styleSpecificity.get(style) ?? exports.inlineSpecificity
        : exports.inlineSpecificity;
}
exports.getSpecificity = getSpecificity;
exports.inlineSpecificity = {
    inline: 1,
    A: 0,
    B: 0,
    C: 0,
    I: 0,
    S: 1,
    O: Infinity,
};
//# sourceMappingURL=stylesheet.js.map