import { Computed as Computed, Signal } from "../signals";
import { NormalizedOptions } from "./prop-mapping";
import { ExtractedStyleValue, GetInteraction, Interaction } from "../../types";
import { AnimatableValue, SharedValue } from "react-native-reanimated";
export interface InteropComputed extends Computed<any> {
    rerender(parent: InteropComputed, props: Record<string, unknown>): void;
    props: Record<string, unknown>;
    parent: InteropComputed;
    lastDependencies: unknown[];
    contextValue?: InteropComputed;
    shouldUpdateContext: boolean;
    convertToPressable: boolean;
    requiresLayout: boolean;
    isLayoutReady: () => boolean;
    signals: Map<string, Signal<any>>;
    getVariable: (name: string) => ExtractedStyleValue;
    setVariable: (name: string, value: ExtractedStyleValue) => void;
    hasSetVariable: (name: string) => boolean;
    getContainer: (name: string) => InteropComputed | undefined;
    setContainer: (name: string) => void;
    getLayout(): [number, number];
    getInteraction: GetInteraction;
    cleanup(): void;
    setInteraction: <T extends keyof Interaction>(name: T, value: Parameters<NonNullable<Interaction[T]>["set"]>[0]) => void;
    isAnimated: boolean;
    sharedValues: Record<string, SharedValue<any>>;
    currentAnimationNames: Set<string>;
}
export declare function useInteropComputed(props: Record<string, unknown>, options: NormalizedOptions<Record<string, unknown>>): any;
export declare function createInteropComputed(options: NormalizedOptions<Record<string, unknown>>, props: Record<string, unknown>, parent: InteropComputed): InteropComputed;
export declare const defaultValues: Record<string, AnimatableValue | (() => AnimatableValue)>;
