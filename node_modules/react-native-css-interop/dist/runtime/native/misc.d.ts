import { Dimensions } from "react-native";
import { INTERNAL_RESET, INTERNAL_SET } from "../../shared";
import { ContainerRuntime, ExtractedAnimation, StyleMeta, StyleProp } from "../../types";
export declare const animationMap: Map<string, ExtractedAnimation>;
export declare const globalStyles: Map<string, StyleProp>;
export declare const opaqueStyles: WeakMap<object, StyleProp>;
export declare const styleSpecificity: WeakMap<object, import("../../types").CSSSpecificity>;
export declare const styleMetaMap: WeakMap<NonNullable<StyleProp>, StyleMeta>;
export declare const ContainerContext: import("react").Context<Record<string, ContainerRuntime>>;
export declare const vw: {
    get: () => number;
    [INTERNAL_RESET]: (dimensions: Dimensions) => void;
    [INTERNAL_SET]: (nextValue: number | ((previous?: number | undefined) => number) | undefined) => void;
};
export declare const vh: {
    get: () => number;
    [INTERNAL_RESET]: (dimensions: Dimensions) => void;
    [INTERNAL_SET]: (nextValue: number | ((previous?: number | undefined) => number) | undefined) => void;
};
export declare const isReduceMotionEnabled: {
    [INTERNAL_RESET]: () => void;
    subscriptions: Set<import("../signals").Computed<any> | (() => void)>;
    get(): boolean;
    id: string | undefined;
    peek(): boolean;
    set(nextValue: boolean | ((previous?: boolean | undefined) => boolean) | undefined): void;
    subscribe(callback: () => void): () => void;
    unsubscribe(callback: () => void): void;
};
