/// <reference types="jest" />
import { remapProps } from "../index";
import { CssToReactNativeRuntimeOptions, EnableCssInteropOptions, Style } from "../types";
export { globalStyles, styleMetaMap } from "../runtime/native/misc";
export { warnings } from "../runtime/native/stylesheet";
import "../core-components";
export * from "../types";
declare global {
    namespace jest {
        interface Matchers<R> {
            toHaveStyle(style?: Style | Style[]): R;
            toHaveAnimatedStyle(style?: Style): R;
        }
    }
}
export declare function createMockComponent<P extends object, M = {
    className: "style";
}>(Component: React.ComponentType<P>, { mapping, }?: {
    mapping?: EnableCssInteropOptions<P> & M;
}): import("react").ForwardRefExoticComponent<import("react").PropsWithoutRef<P & { [K in keyof M]?: string | undefined; }> & import("react").RefAttributes<unknown>> & {
    mock: jest.Mock<any, [props: P & { [K in keyof M]?: string | undefined; }, _ref: any], any>;
};
export declare function createRemappedComponent<P extends object = any, M = {
    className: "style";
}>(Component: React.ComponentType<P>, mapping: Parameters<typeof remapProps<any, any>>[1]): import("react").ForwardRefExoticComponent<import("react").PropsWithoutRef<P & { [K in keyof M]?: string | undefined; }> & import("react").RefAttributes<unknown>> & {
    mock: jest.Mock<any, [props: P & { [K in keyof M]?: string | undefined; }, _ref: any], any>;
};
export declare const resetStyles: (options?: import("../types").ResetOptions | undefined) => void;
export declare function registerCSS(css: string, options?: CssToReactNativeRuntimeOptions): void;
