"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cssInterop = exports.unstable_styled = void 0;
const react_1 = require("react");
const react_native_1 = require("react-native");
const css_interop_1 = require("./runtime/css-interop");
const render_1 = require("./runtime/render");
const prop_mapping_1 = require("./runtime/native/prop-mapping");
const misc_1 = require("./runtime/native/misc");
const css_interop_2 = require("./runtime/css-interop");
function unstable_styled(component, mapping, interop = css_interop_1.defaultCSSInterop) {
    if (mapping) {
        cssInterop(component, mapping, interop);
    }
    return (0, react_1.forwardRef)((props, _ref) => {
        return (0, render_1.render)((element, { children, ...props }, key) => {
            children = Array.isArray(children) ? children : [children];
            return (0, react_1.createElement)(element, { key, ...props }, ...children);
        }, component, props, props.key);
    });
}
exports.unstable_styled = unstable_styled;
function cssInterop(component, mapping, interop = css_interop_1.defaultCSSInterop) {
    const config = (0, prop_mapping_1.getNormalizeConfig)(mapping);
    let render = ({ children, ___pressable, ...props }, ref) => {
        if (ref) {
            props.ref = ref;
        }
        if (___pressable) {
            return (0, react_1.createElement)(component, props, children);
        }
        else {
            return (0, react_1.createElement)(...interop(component, config, props, children));
        }
    };
    if (__DEV__) {
        render.displayName = `CSSInterop.${component.displayName ?? component.name ?? "unknown"}`;
    }
    render = (0, react_1.forwardRef)(render);
    const checkArray = (props) => props.some((prop) => {
        return Array.isArray(prop) ? checkArray(prop) : misc_1.styleMetaMap.has(prop);
    });
    const interopComponent = {
        type: render,
        createElementWithInterop(props, children) {
            return (0, react_1.createElement)(...interop(component, config, props, children));
        },
        check(props) {
            for (const [targetProp, { sources, nativeStyleToProp },] of config.config) {
                if (nativeStyleToProp)
                    return true;
                for (const source of sources) {
                    if (typeof props[source] === "string") {
                        return true;
                    }
                }
                const target = props[targetProp];
                if (Array.isArray(target)) {
                    if (checkArray(target)) {
                        return true;
                    }
                }
                else if (misc_1.styleMetaMap.has(target)) {
                    return true;
                }
            }
            return false;
        },
    };
    render_1.interopComponents.set(component, interopComponent);
}
exports.cssInterop = cssInterop;
cssInterop(react_native_1.Image, { className: "style" });
cssInterop(react_native_1.Pressable, { className: "style" });
cssInterop(react_native_1.Text, { className: "style" });
cssInterop(react_native_1.View, { className: "style" });
cssInterop(react_native_1.ActivityIndicator, {
    className: {
        target: "style",
        nativeStyleToProp: { color: true },
    },
});
cssInterop(react_native_1.StatusBar, {
    className: {
        target: false,
        nativeStyleToProp: { backgroundColor: true },
    },
});
cssInterop(react_native_1.ScrollView, {
    className: "style",
    contentContainerClassName: "contentContainerStyle",
    indicatorClassName: "indicatorStyle",
});
cssInterop(react_native_1.TextInput, {
    className: {
        target: "style",
        nativeStyleToProp: {
            textAlign: true,
        },
    },
    placeholderClassName: {
        target: false,
        nativeStyleToProp: {
            color: "placeholderTextColor",
        },
    },
    selectionClassName: {
        target: false,
        nativeStyleToProp: {
            color: "selectionColor",
        },
    },
});
(0, css_interop_2.remapProps)(react_native_1.FlatList, {
    className: "style",
    ListFooterComponentClassName: "ListFooterComponentStyle",
    ListHeaderComponentClassName: "ListHeaderComponentStyle",
    columnWrapperClassName: "columnWrapperStyle",
    contentContainerClassName: "contentContainerStyle",
    indicatorClassName: "indicatorStyle",
});
(0, css_interop_2.remapProps)(react_native_1.ImageBackground, {
    className: "style",
    imageClassName: "imageStyle",
});
(0, css_interop_2.remapProps)(react_native_1.KeyboardAvoidingView, {
    className: "style",
    contentContainerClassName: "contentContainerStyle",
});
(0, css_interop_2.remapProps)(react_native_1.VirtualizedList, {
    className: "style",
    ListFooterComponentClassName: "ListFooterComponentStyle",
    ListHeaderComponentClassName: "ListHeaderComponentStyle",
    contentContainerClassName: "contentContainerStyle",
    indicatorClassName: "indicatorStyle",
});
try {
    const { Svg } = require("react-native-svg").Svg;
    cssInterop(Svg, {
        className: "style",
    });
}
catch {
}
//# sourceMappingURL=core-components.js.map